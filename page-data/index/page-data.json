{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"a4d0fe46-721a-5017-be5b-01b284d673a8","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    title: \"React Working Patterns\",\n    mdxType: \"Head\"\n  }), mdx(\"h1\", null, \"React Working Patterns\"), mdx(\"h4\", null, \"UI Meetup - 15th Mar 2021\"), mdx(\"h6\", null, \"By Phani Rahul Sivalenka \", mdx(\"a\", {\n    parentName: \"h6\",\n    \"href\": \"https://twitter.com/rahulsivalenka\"\n  }, \"@rahulsivalenka\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: oceanicNext,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"consider this edit form\\\" file=./samples/MyEditForm.txt\",\n    \"subtitle\": \"\\\"consider\",\n    \"this\": true,\n    \"edit\": true,\n    \"form\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"17:27 subtitle=\\\"it has two confirmation dialogs\\\" file=./samples/MyEditForm.txt\",\n    \"17:27\": true,\n    \"subtitle\": \"\\\"it\",\n    \"has\": true,\n    \"two\": true,\n    \"confirmation\": true,\n    \"dialogs\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"14:15 subtitle=\\\"which are opened by these two buttons\\\" file=./samples/MyEditForm.txt\",\n    \"14:15\": true,\n    \"subtitle\": \"\\\"which\",\n    \"are\": true,\n    \"opened\": true,\n    \"by\": true,\n    \"these\": true,\n    \"two\": true,\n    \"buttons\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2:8 subtitle=\\\"to open and close each of these we require these state and function declarations\\\" file=./samples/MyEditForm.txt\",\n    \"2:8\": true,\n    \"subtitle\": \"\\\"to\",\n    \"open\": true,\n    \"and\": true,\n    \"close\": true,\n    \"each\": true,\n    \"of\": true,\n    \"these\": true,\n    \"we\": true,\n    \"require\": true,\n    \"state\": true,\n    \"function\": true,\n    \"declarations\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"how can we refactor this to make it DRY?\\\" file=./samples/MyEditForm.txt\",\n    \"subtitle\": \"\\\"how\",\n    \"can\": true,\n    \"we\": true,\n    \"refactor\": true,\n    \"this\": true,\n    \"to\": true,\n    \"make\": true,\n    \"it\": true,\n    \"DRY?\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"#1 Custom Hook\\\" subtitle=\\\"one way is to extract repetitive code into a generic custom hook\\\" file=./samples/MyEditForm-alt1.txt\",\n    \"title\": \"\\\"#1\",\n    \"Custom\": true,\n    \"Hook\\\"\": true,\n    \"subtitle\": \"\\\"one\",\n    \"way\": true,\n    \"is\": true,\n    \"to\": true,\n    \"extract\": true,\n    \"repetitive\": true,\n    \"code\": true,\n    \"into\": true,\n    \"a\": true,\n    \"generic\": true,\n    \"custom\": true,\n    \"hook\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt1.txt\"\n  }, \"function useDialog() {\\n  const [open, setOpen] = useState(false);\\n\\n  const showDialog = useCallback(() => {\\n    setOpen(true);\\n  }, []);\\n\\n  const closeDialog = useCallback(() => {\\n    setOpen(false);\\n  }, []);\\n\\n  return [open, showDialog, closeDialog];\\n}\\n\\nfunction MyEditForm() {\\n  const [saveConfirmationOpen, showSaveConfirmation, hideSaveConfirmation] = useDialog();\\n  const [deleteConfirmationOpen, showDeleteConfirmation, hideDeleteConfirmation] = useDialog();\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"12,16:17 title=\\\"#1 Custom Hook\\\" subtitle=\\\"returning an array allows for easier naming of output variables when using multiple times\\\" file=./samples/MyEditForm-alt1.txt\",\n    \"12,16:17\": true,\n    \"title\": \"\\\"#1\",\n    \"Custom\": true,\n    \"Hook\\\"\": true,\n    \"subtitle\": \"\\\"returning\",\n    \"an\": true,\n    \"array\": true,\n    \"allows\": true,\n    \"for\": true,\n    \"easier\": true,\n    \"naming\": true,\n    \"of\": true,\n    \"output\": true,\n    \"variables\": true,\n    \"when\": true,\n    \"using\": true,\n    \"multiple\": true,\n    \"times\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt1.txt\"\n  }, \"function useDialog() {\\n  const [open, setOpen] = useState(false);\\n\\n  const showDialog = useCallback(() => {\\n    setOpen(true);\\n  }, []);\\n\\n  const closeDialog = useCallback(() => {\\n    setOpen(false);\\n  }, []);\\n\\n  return [open, showDialog, closeDialog];\\n}\\n\\nfunction MyEditForm() {\\n  const [saveConfirmationOpen, showSaveConfirmation, hideSaveConfirmation] = useDialog();\\n  const [deleteConfirmationOpen, showDeleteConfirmation, hideDeleteConfirmation] = useDialog();\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"file=./samples/MyEditForm-alt2.txt\",\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  default: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'default',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'default',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state = 'default', { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [dialogOpen, send] = useReducer(confirmationDialogReducer)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => send('OPEN_SAVE_CONFIRMATION'))}>Save</button>\\n      <button onClick={() => send('OPEN_DELETE_CONFIRMATION'))}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => send('CLOSE'))}\\n        open={dialogOpen = 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => send('CLOSE'))}\\n        open={dialogOpen = 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"a4d0fe46-721a-5017-be5b-01b284d673a8","slug":"/ui-meetuo-react-working-patterns","title":"React Working Patterns"}},"staticQueryHashes":[]}