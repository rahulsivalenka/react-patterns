{"componentChunkName":"component---node-modules-gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"bab6e2e8-f32b-532d-852c-d2cbd12f9d97","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar theme = themes.notes;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    title: \"React Working Patterns\",\n    mdxType: \"Head\"\n  }), mdx(\"h1\", null, \"React Working Patterns\"), mdx(\"h4\", null, \"UI Meetup - 15th Mar 2021\"), mdx(\"h6\", null, \"By Phani Rahul Sivalenka \", mdx(\"a\", {\n    parentName: \"h6\",\n    \"href\": \"https://twitter.com/rahulsivalenka\"\n  }, \"@rahulsivalenka\")), mdx(\"hr\", null), mdx(\"h3\", null, \"State Transitions and Keeping Them DRY\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: oceanicNext,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"consider this edit form\\\" file=./samples/MyEditForm.txt\",\n    \"subtitle\": \"\\\"consider\",\n    \"this\": true,\n    \"edit\": true,\n    \"form\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"17:27 subtitle=\\\"it has two confirmation dialogs\\\" file=./samples/MyEditForm.txt\",\n    \"17:27\": true,\n    \"subtitle\": \"\\\"it\",\n    \"has\": true,\n    \"two\": true,\n    \"confirmation\": true,\n    \"dialogs\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"14:15 subtitle=\\\"which are opened by these two buttons\\\" file=./samples/MyEditForm.txt\",\n    \"14:15\": true,\n    \"subtitle\": \"\\\"which\",\n    \"are\": true,\n    \"opened\": true,\n    \"by\": true,\n    \"these\": true,\n    \"two\": true,\n    \"buttons\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"2:8 subtitle=\\\"to open and close each of these we require these state and function declarations\\\" file=./samples/MyEditForm.txt\",\n    \"2:8\": true,\n    \"subtitle\": \"\\\"to\",\n    \"open\": true,\n    \"and\": true,\n    \"close\": true,\n    \"each\": true,\n    \"of\": true,\n    \"these\": true,\n    \"we\": true,\n    \"require\": true,\n    \"state\": true,\n    \"function\": true,\n    \"declarations\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"how can we refactor this to make it DRY?\\\" file=./samples/MyEditForm.txt\",\n    \"subtitle\": \"\\\"how\",\n    \"can\": true,\n    \"we\": true,\n    \"refactor\": true,\n    \"this\": true,\n    \"to\": true,\n    \"make\": true,\n    \"it\": true,\n    \"DRY?\\\"\": true,\n    \"file\": \"./samples/MyEditForm.txt\"\n  }, \"function MyEditForm() {\\n  const [saveConfirmationOpen, setSaveConfirmationOpen] = useState(false)\\n  const showSaveConfirmation = () => setSaveConfirmationOpen(true)\\n  const hideSaveConfirmation = () => setSaveConfirmationOpen(false)\\n\\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false)\\n  const showDeleteConfirmation = () => setDeleteConfirmationOpen(true)\\n  const hideDeleteConfirmation = () => setDeleteConfirmationOpen(false)\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"#1 Custom Hook\\\" subtitle=\\\"one way is to extract repetitive code into a generic custom hook\\\" file=./samples/MyEditForm-alt1.txt\",\n    \"title\": \"\\\"#1\",\n    \"Custom\": true,\n    \"Hook\\\"\": true,\n    \"subtitle\": \"\\\"one\",\n    \"way\": true,\n    \"is\": true,\n    \"to\": true,\n    \"extract\": true,\n    \"repetitive\": true,\n    \"code\": true,\n    \"into\": true,\n    \"a\": true,\n    \"generic\": true,\n    \"custom\": true,\n    \"hook\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt1.txt\"\n  }, \"function useDialog() {\\n  const [open, setOpen] = useState(false);\\n\\n  const showDialog = useCallback(() => {\\n    setOpen(true);\\n  }, []);\\n\\n  const closeDialog = useCallback(() => {\\n    setOpen(false);\\n  }, []);\\n\\n  return [open, showDialog, closeDialog];\\n}\\n\\nfunction MyEditForm() {\\n  const [saveConfirmationOpen, showSaveConfirmation, hideSaveConfirmation] = useDialog();\\n  const [deleteConfirmationOpen, showDeleteConfirmation, hideDeleteConfirmation] = useDialog();\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"12,16:17 title=\\\"#1 Custom Hook\\\" subtitle=\\\"returning an array allows for easier naming of output variables when using multiple times\\\" file=./samples/MyEditForm-alt1.txt\",\n    \"12,16:17\": true,\n    \"title\": \"\\\"#1\",\n    \"Custom\": true,\n    \"Hook\\\"\": true,\n    \"subtitle\": \"\\\"returning\",\n    \"an\": true,\n    \"array\": true,\n    \"allows\": true,\n    \"for\": true,\n    \"easier\": true,\n    \"naming\": true,\n    \"of\": true,\n    \"output\": true,\n    \"variables\": true,\n    \"when\": true,\n    \"using\": true,\n    \"multiple\": true,\n    \"times\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt1.txt\"\n  }, \"function useDialog() {\\n  const [open, setOpen] = useState(false);\\n\\n  const showDialog = useCallback(() => {\\n    setOpen(true);\\n  }, []);\\n\\n  const closeDialog = useCallback(() => {\\n    setOpen(false);\\n  }, []);\\n\\n  return [open, showDialog, closeDialog];\\n}\\n\\nfunction MyEditForm() {\\n  const [saveConfirmationOpen, showSaveConfirmation, hideSaveConfirmation] = useDialog();\\n  const [deleteConfirmationOpen, showDeleteConfirmation, hideDeleteConfirmation] = useDialog();\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={showSaveConfirmation}>Save</button>\\n      <button onClick={showDeleteConfirmation}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={hideSaveConfirmation}\\n        open={saveConfirmationOpen}\\n      />\\n    </>\\n  )\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"#1 Custom Hook\",\n    mdxType: \"Step\"\n  }, mdx(\"div\", {\n    className: \"basic-text-slide\"\n  }, mdx(\"h2\", null, \"Advantages\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clean\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"DRY\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Reusable\")), mdx(\"h2\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://reactjs.org/docs/hooks-custom.html\"\n  }, \"Building Your Own Hooks\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://usehooks.com/\"\n  }, \"useHooks - Easy to understand React Hook recipes\")))))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: oceanicNext,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"#2 State Machine\\\" subtitle=\\\"another way is to use state machine pattern\\\" file=./samples/MyEditForm-alt2.txt\",\n    \"title\": \"\\\"#2\",\n    \"State\": true,\n    \"Machine\\\"\": true,\n    \"subtitle\": \"\\\"another\",\n    \"way\": true,\n    \"is\": true,\n    \"to\": true,\n    \"use\": true,\n    \"state\": true,\n    \"machine\": true,\n    \"pattern\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:18 title=\\\"#2 State Machine\\\" subtitle=\\\"define various states and transitions in an object format\\\" file=./samples/MyEditForm-alt2.txt\",\n    \"1:18\": true,\n    \"title\": \"\\\"#2\",\n    \"State\": true,\n    \"Machine\\\"\": true,\n    \"subtitle\": \"\\\"define\",\n    \"various\": true,\n    \"states\": true,\n    \"and\": true,\n    \"transitions\": true,\n    \"in\": true,\n    \"an\": true,\n    \"object\": true,\n    \"format\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"20:22,25 title=\\\"#2 State Machine\\\" subtitle=\\\"define a reducer which performs the state transitions as per the state machine defined\\\" file=./samples/MyEditForm-alt2.txt\",\n    \"20:22,25\": true,\n    \"title\": \"\\\"#2\",\n    \"State\": true,\n    \"Machine\\\"\": true,\n    \"subtitle\": \"\\\"define\",\n    \"a\": true,\n    \"reducer\": true,\n    \"which\": true,\n    \"performs\": true,\n    \"the\": true,\n    \"state\": true,\n    \"transitions\": true,\n    \"as\": true,\n    \"per\": true,\n    \"machine\": true,\n    \"defined\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"25[29:32],27,33[15:66],34[15:68],38,44 title=\\\"#2 State Machine\\\" subtitle=\\\"trigger the corresponding event to change the state\\\" file=./samples/MyEditForm-alt2.txt\",\n    \"25[29:32],27,33[15:66],34[15:68],38,44\": true,\n    \"title\": \"\\\"#2\",\n    \"State\": true,\n    \"Machine\\\"\": true,\n    \"subtitle\": \"\\\"trigger\",\n    \"the\": true,\n    \"corresponding\": true,\n    \"event\": true,\n    \"to\": true,\n    \"change\": true,\n    \"state\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"39,45 title=\\\"#2 State Machine\\\" subtitle=\\\"use the state to determine which dialog to show\\\" file=./samples/MyEditForm-alt2.txt\",\n    \"39,45\": true,\n    \"title\": \"\\\"#2\",\n    \"State\": true,\n    \"Machine\\\"\": true,\n    \"subtitle\": \"\\\"use\",\n    \"the\": true,\n    \"state\": true,\n    \"to\": true,\n    \"determine\": true,\n    \"which\": true,\n    \"dialog\": true,\n    \"show\\\"\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h5\", null, \"Visualizing the state machine\"), mdx(\"iframe\", {\n    height: \"100%\",\n    width: \"90%\",\n    src: \"https://xstate.js.org/viz/?gist=f4019c6d8c84f86de8e1fc4fd1883dec\"\n  }), mdx(\"hr\", null), mdx(\"h5\", null, \"Another Use Case: Stepper Transitions\"), mdx(\"iframe\", {\n    height: \"100%\",\n    width: \"90%\",\n    src: \"https://xstate.js.org/viz/?gist=7d8c7c185ee2d08f4ce53c015798567a\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: COLUMN_THEMES,\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    title: \"#2 State Machine\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:22 file=./samples/MyEditForm-alt2.txt\",\n    \"1:22\": true,\n    \"file\": \"./samples/MyEditForm-alt2.txt\"\n  }, \"const confirmationDialogStateMachine = {\\n  none: {\\n    on: {\\n      OPEN_SAVE_CONFIRMATION: 'saveConfirmation',\\n      OPEN_DELETE_CONFIRMATION: 'deleteConfirmation',\\n    }\\n  },\\n  saveConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  },\\n  deleteConfirmation: {\\n    on: {\\n      CLOSE: 'none',\\n    }\\n  }\\n}\\n\\nfunction confirmationDialogReducer(state, { type }) {\\n  return confirmationDialogStateMachine[state].on[type]\\n}\\n\\nfunction MyEditForm() {\\n  const [visibleDialogType, send /* or dispatch */] = useReducer(confirmationDialogReducer, 'none')\\n\\n  const transition = (dialogType) => send({ type: dialogType });\\n\\n  return (\\n    <>\\n      <form>{/* ... */}</form>\\n\\n      <button onClick={() => transition('OPEN_SAVE_CONFIRMATION')}>Save</button>\\n      <button onClick={() => transition('OPEN_DELETE_CONFIRMATION')}>Delete</button>\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to save?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'saveConfirmation'}\\n      />\\n\\n      <ConfirmationDialog\\n        message=\\\"Are you sure you want to delete?\\\"\\n        onClose={() => transition('CLOSE')}\\n        open={visibleDialogType === 'deleteConfirmation'}\\n      />\\n    </>\\n  )\\n}\\n\")), mdx(\"div\", {\n    className: \"basic-text-slide\"\n  }, mdx(\"h3\", null, \"Advantages\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Clean\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Predictable\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Single place to view/change all the states and transitions\")), mdx(\"h3\", null, \"Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://css-tricks.com/robust-react-user-interfaces-with-finite-state-machines/\"\n  }, \"Robust React User Interfaces with Finite State Machines\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://css-tricks.com/finite-state-machines-with-react/\"\n  }, \"Finite State Machines with React\")))))), mdx(\"hr\", null), mdx(\"h3\", null, \"Too Many State Declarations\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: oceanicNext,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"consider this code sample\\\" file=./samples/TooManyStates.txt\",\n    \"subtitle\": \"\\\"consider\",\n    \"this\": true,\n    \"code\": true,\n    \"sample\\\"\": true,\n    \"file\": \"./samples/TooManyStates.txt\"\n  }, \"function DateSelection() {\\n  const [minToDate, setMinToDate] = useState(formValues.fromDate);\\n  const [maxDate, setMaxDate] = useState();\\n  const [minDate, setMinDate] = useState();\\n  const [defaultDate, setDefaultDate] = useState();\\n\\n  useEffect(() => {\\n    const { min, max } = getMinMaxTimes(getDateInAppTz, dateRange);\\n    setMinToDate(min);\\n    setMaxDate(max);\\n    setMinDate(min);\\n    setDefaultDate(max);\\n  }, [/* deps */]);\\n\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"subtitle=\\\"react re-renders the component on every state change\\\" file=./samples/TooManyStates.txt\",\n    \"subtitle\": \"\\\"react\",\n    \"re-renders\": true,\n    \"the\": true,\n    \"component\": true,\n    \"on\": true,\n    \"every\": true,\n    \"state\": true,\n    \"change\\\"\": true,\n    \"file\": \"./samples/TooManyStates.txt\"\n  }, \"function DateSelection() {\\n  const [minToDate, setMinToDate] = useState(formValues.fromDate);\\n  const [maxDate, setMaxDate] = useState();\\n  const [minDate, setMinDate] = useState();\\n  const [defaultDate, setDefaultDate] = useState();\\n\\n  useEffect(() => {\\n    const { min, max } = getMinMaxTimes(getDateInAppTz, dateRange);\\n    setMinToDate(min);\\n    setMaxDate(max);\\n    setMinDate(min);\\n    setDefaultDate(max);\\n  }, [/* deps */]);\\n\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"4\": true,\n    \"className\": \"language-jsx\",\n    \"metastring\": \"9:12 subtitle=\\\"which means when this useEffect is executed it will render 4 times, once per each state change\\\" file=./samples/TooManyStates.txt\",\n    \"9:12\": true,\n    \"subtitle\": \"\\\"which\",\n    \"means\": true,\n    \"when\": true,\n    \"this\": true,\n    \"useEffect\": true,\n    \"is\": true,\n    \"executed\": true,\n    \"it\": true,\n    \"will\": true,\n    \"render\": true,\n    \"times,\": true,\n    \"once\": true,\n    \"per\": true,\n    \"each\": true,\n    \"state\": true,\n    \"change\\\"\": true,\n    \"file\": \"./samples/TooManyStates.txt\"\n  }, \"function DateSelection() {\\n  const [minToDate, setMinToDate] = useState(formValues.fromDate);\\n  const [maxDate, setMaxDate] = useState();\\n  const [minDate, setMinDate] = useState();\\n  const [defaultDate, setDefaultDate] = useState();\\n\\n  useEffect(() => {\\n    const { min, max } = getMinMaxTimes(getDateInAppTz, dateRange);\\n    setMinToDate(min);\\n    setMaxDate(max);\\n    setMinDate(min);\\n    setDefaultDate(max);\\n  }, [/* deps */]);\\n\\n  // ...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\",\n    \"metastring\": \"title=\\\"#3 useReducer\\\" subtitle=\\\"use useReducer hook when there are too many / complex states\\\" file=./samples/TooManyStates-alt.txt\",\n    \"title\": \"\\\"#3\",\n    \"useReducer\\\"\": true,\n    \"subtitle\": \"\\\"use\",\n    \"useReducer\": true,\n    \"hook\": true,\n    \"when\": true,\n    \"there\": true,\n    \"are\": true,\n    \"too\": true,\n    \"many\": true,\n    \"/\": true,\n    \"complex\": true,\n    \"states\\\"\": true,\n    \"file\": \"./samples/TooManyStates-alt.txt\"\n  }, \"function dateSelectionReducer(state, { type, ...payload }) {\\n  switch(type) {\\n    case 'update':\\n      return {\\n        ...state,\\n        ...payload,\\n      };\\n    default:\\n      return state;\\n  }\\n}\\n\\nfunction DateSelection() {\\n  const [{ minToDate, maxDate, minDate, defaultDate }, send] = useReducer(dateSelectionReducer, {\\n    minToDate: formValues.fromDate,\\n    maxDate: null,\\n    minDate: null,\\n    defaultDate: null,\\n  })\\n\\n  useEffect(() => {\\n    const { min, max } = getMinMaxTimes(getDateInAppTz, dateRange);\\n    \\n    send({\\n      type: 'update',\\n      minToDate: min,\\n      maxDate: max,\\n      minDate: min,\\n      defaultDate: max,\\n    })\\n  }, [/* deps */]);\\n\\n  // ...\\n}\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"bab6e2e8-f32b-532d-852c-d2cbd12f9d97","slug":"/ui-meetup-react-working-patterns","title":"React Working Patterns"}},"staticQueryHashes":[]}